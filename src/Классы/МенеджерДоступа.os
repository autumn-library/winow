Перем Токены;
Перем ТаблицаЛогиновИРолей;
Перем ТаблицаРолейТочекМаршрутов;
Перем ПерваяСоль;
Перем ВтораяСоль;

&Пластилин Перем Парсеры;

Процедура ДобавитьТокен(Логин, Токен) Экспорт
	Токены.Вставить(Логин, ЗасолитьТокен(Токен));
КонецПроцедуры

Процедура ДобавитьРольЛогина(Логин, Роль) Экспорт
	НоваяРольЛогина = ТаблицаЛогиновИРолей.Добавить();
	НоваяРольЛогина.Логин = Логин;
	НоваяРольЛогина.Роль = Роль;
КонецПроцедуры

Процедура ДобавитьРольТочкиМаршрута(Действие, Роль) Экспорт
	НоваяРольТочкиМаршрута = ТаблицаРолейТочекМаршрутов.Добавить();
	НоваяРольТочкиМаршрута.Действие = Действие;
	НоваяРольТочкиМаршрута.Роль = Роль;
КонецПроцедуры

Процедура ДобавитьРолиТочкиДоступаСписком(Действие, СписокРолей) Экспорт
	Для Каждого ТекущаяРоль из СтрРазделить(СписокРолей, ",") Цикл
		ДобавитьРольТочкиМаршрута(Действие, СокрЛП(ТекущаяРоль));
	КонецЦикла;
КонецПроцедуры

Функция РольДоступна(Логин, Роль) Экспорт
	Возврат ТаблицаЛогиновИРолей.НайтиСтроки(Новый Структура("Логин, Роль", Логин, Роль)).Количество() > 0;
КонецФункции

Функция ТочкаМаршрутаДоступна(Логин, Действие) Экспорт
	
	РолиТочкиМаршрута = ТаблицаРолейТочекМаршрутов.НайтиСтроки(Новый Структура("Действие", Действие));

	Для Каждого ТекущаяРоль из РолиТочкиМаршрута Цикл
		Если РольДоступна(Логин, ТекущаяРоль.Роль) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

Функция ТокенВалидный(Логин, Токен) Экспорт
	Возврат Токены[Логин] = ЗасолитьТокен(Токен);
КонецФункции

Функция ТочкаМаршрутаИмеетРоли(Действие) Экспорт
	Возврат НЕ ТаблицаРолейТочекМаршрутов.Найти(Действие, "Действие") = Неопределено;
КонецФункции

&Желудь
Процедура ПриСозданииОбъекта()
	Инициализация();
КонецПроцедуры

Процедура Инициализация()
	Токены = Новый Соответствие();
	ТаблицаЛогиновИРолей = Новый ТаблицаЗначений();
	ТаблицаРолейТочекМаршрутов = Новый ТаблицаЗначений();

	ТаблицаЛогиновИРолей.Колонки.Добавить("Логин");
	ТаблицаЛогиновИРолей.Колонки.Добавить("Роль");

	ТаблицаРолейТочекМаршрутов.Колонки.Добавить("Действие");
	ТаблицаРолейТочекМаршрутов.Колонки.Добавить("Роль");

	ПерваяСоль = Строка(Новый УникальныйИдентификатор());
	ВтораяСоль = Строка(Новый УникальныйИдентификатор());
КонецПроцедуры

Функция ХешироватьСтроку(Строка)  
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Хеширование.Добавить(Строка);
	
	Возврат Base64Строка(Хеширование.ХешСумма);
	
КонецФункции

Функция ЗасолитьТокен(Знач Токен)
	Возврат ХешироватьСтроку(СтрШаблон("%1%2%3", ПерваяСоль, ХешироватьСтроку(Токен), ВтораяСоль));
КонецФункции

Функция ПолучитьАвторизационныеДанныеПоСтрокеЗаголовка(знач СтрокаЗаголовкаАвторизациии) Экспорт

	СтрокаЗаголовкаАвторизациии = СокрЛП(СтрокаЗаголовкаАвторизациии);
	Результат = Новый Структура("Логин, Токен", "", "");

	Если СтрНачинаетсяС(СтрокаЗаголовкаАвторизациии, "Basic") Тогда
		СтрокаАвторизации = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(СтрЗаменить(СтрокаЗаголовкаАвторизациии, "Basic ", "")));
		Разделенные = Парсеры.РазделитьСтроку(СтрокаАвторизации, ":");
		Результат.Логин = СокрЛП(Разделенные.Лево);
		Результат.Токен = СокрЛП(Разделенные.Право);
	КонецЕсли;

	Возврат Результат;
КонецФункции