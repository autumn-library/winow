#Использовать json

Перем ТекстЗапроса Экспорт;
Перем Заголовки Экспорт;
Перем Тело Экспорт;
Перем ТелоДвоичныеДанные Экспорт;
Перем Метод Экспорт;
Перем ПолныйПуть Экспорт;
Перем Путь Экспорт;
Перем ПараметрыИменные Экспорт;
Перем ПараметрыПорядковые Экспорт;
Перем ДатаПолучения Экспорт;
Перем ДвоичныеДанные Экспорт;
Перем Сессия Экспорт;
Перем КлючРукопожатия Экспорт;
Перем АдресУдаленногоУзла Экспорт;
Перем ПортУдаленногоУзла Экспорт;

Перем Куки Экспорт;
Перем Парсеры;
Перем Настройки;
Перем ДанныеФормы;


&Желудь
&Характер("Компанейский")
&ОсобоеОбращение(ОтключитьВсеНапильники = Истина)
Процедура ПриСозданииОбъекта(
	&Пластилин("Куки") _Куки,
	&Пластилин("Парсеры") _Парсеры,
	&Пластилин("Настройки") _Настройки
)

	ТекстЗапроса = "";
	Заголовки = Новый Соответствие();
	Тело = "";
	Метод = "";
	ПолныйПуть = "";
	Путь = "";
	ПараметрыИменные = Новый Соответствие();
	ПараметрыПорядковые = Новый Массив();
	ДатаПолучения = ТекущаяДата();
	АдресУдаленногоУзла = "";
	ПортУдаленногоУзла = 0;

	Куки = _Куки;
	Парсеры = _Парсеры;
	Настройки = _Настройки;

КонецПроцедуры

Функция ЗначенияПараметровДляТочкиМаршрута() Экспорт
	Результат = Новый Соответствие();
	Результат.Вставить("Запрос", ЭтотОбъект);
	Результат.Вставить("ТекстЗапроса", ТекстЗапроса);
	Результат.Вставить("ЗаголовкиЗапроса", Заголовки);
	Результат.Вставить("ТелоЗапроса", Тело);
	Результат.Вставить("ТелоЗапросаСоответствие", ТелоЗапросаСоответствие());
	Результат.Вставить("ТелоЗапросаДвоичныеДанные", ТелоДвоичныеДанные);
	Результат.Вставить("МетодЗапроса", Метод);
	Результат.Вставить("ПолныйПутьЗапроса", ПолныйПуть);
	Результат.Вставить("ПутьЗапроса", Путь);
	Результат.Вставить("ПараметрыЗапросаИменные", ПараметрыИменные);
	Результат.Вставить("ПараметрыЗапросаПорядковые", ПараметрыПорядковые);
	Результат.Вставить("ДатаПолученияЗапроса", ДатаПолучения);
	Результат.Вставить("ДвоичныеДанныеЗапроса", ДвоичныеДанные);
	Результат.Вставить("КукиЗапроса", Куки);
	Результат.Вставить("ТелоЗапросОбъект", ТелоЗапросОбъект());
	Результат.Вставить("ДанныеФормы", ДанныеФормы());
	Результат.Вставить("АдресУдаленногоУзла", АдресУдаленногоУзла);
	Результат.Вставить("ПортУдаленногоУзла", ПортУдаленногоУзла);

	ДополнитьСоответствие(Результат, Результат["ТелоЗапросаСоответствие"]);
	ДополнитьСоответствие(Результат, Результат["ПараметрыЗапросаИменные"]);

	Возврат Результат;
КонецФункции

Процедура УстановитьДанныеФормы(НовыеДанныеФормы) Экспорт

	ДанныеФормы = НовыеДанныеФормы;
	
КонецПроцедуры

Функция ДанныеФормы()

	Если Не ДанныеФормы = Неопределено Тогда
		Возврат ДанныеФормы;
	КонецЕсли;
	
	ДанныеФормы = Новый ДанныеСоставнойФормы();

	ЧастьРазделителя = ПолучитьДвоичныеДанныеИзСтроки("--");
	ЧастьРазделителяСВКПС = ПолучитьДвоичныеДанныеИзСтроки("--" + Символы.ВК + Символы.ПС);

	Если СтрНайти(НРег(Заголовки["Content-Type"]), "multipart/form-data") > 0 Тогда
		РазделительДанных = СокрЛП(СтрЗаменить(Заголовки["Content-Type"], "multipart/form-data; boundary=", ""));
		РазделительДанныхДД = ПолучитьДвоичныеДанныеИзСтроки(РазделительДанных);

		ДДФормы = Парсеры.РазделитьДвоичныеДанныеРазделителемВМассив(ТелоДвоичныеДанные, РазделительДанныхДД);

		Для Каждого ЧастьФормы из ДДФормы Цикл
			Если ЧастьФормы = ЧастьРазделителяСВКПС 
					ИЛИ ЧастьФормы = ЧастьРазделителя Тогда
				Продолжить;
			КонецЕсли;

			РазделенныеДанные = РазделитьДвоичныеДанныеПоляДанныхФормы(ЧастьФормы);
			Если РазделенныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Структура = Новый Структура("Метаданные, Значение", Новый Соответствие);
			Структура.Значение = РазделенныеДанные.Значение;

			СтрокиМетаданных = СтрРазделить(ПолучитьСтрокуИзДвоичныхДанных(РазделенныеДанные.Метаданные), Символы.ПС, Ложь);

			ПлоскиеЗаголовки = Новый Соответствие();

			Для Каждого СтрокаМетаданных из СтрокиМетаданных Цикл
				РазделеннаяСтрока = Парсеры.РазделитьСтроку(СтрокаМетаданных, ":");
				ПлоскиеЗаголовки.Вставить(СокрЛП(РазделеннаяСтрока.Лево), СокрЛП(РазделеннаяСтрока.Право));
				Структура.Метаданные.Вставить(СокрЛП(РазделеннаяСтрока.Лево), 
							УбратьКовычкиИзЗначенийСоответствия(Парсеры.ПараметрыИзТекста(РазделеннаяСтрока.Право, "; ")));	
			КонецЦикла;

			Структура.Метаданные.Вставить("Заголовки", ПлоскиеЗаголовки);

			ДанныеФормы.Добавить(Структура);
			
		КонецЦикла

	КонецЕсли;

	Возврат ДанныеФормы;
КонецФункции

Функция УбратьКовычкиИзЗначенийСоответствия(Соответствие)
	Результат = Новый Соответствие();
	Для Каждого КиЗ Из Соответствие Цикл
		Результат.Вставить(СокрЛП(КиЗ.Ключ), СокрЛП(СтрЗаменить(КиЗ.Значение, """", "")));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ТелоЗапросОбъект() Экспорт
	Результат = Неопределено;

	Если ЗначениеЗаполнено(Тело) 
			И 
			СтрНайти(НРег(СокрЛП(Заголовки["Content-Type"])), "application/json") > 0 Тогда

			Парсер = Новый ПарсерJSON();
			Результат = Парсер.ПрочитатьJSON(Тело, Истина, Ложь, Настройки.АвтоматическиПриводитьОбъектыКСтруктуре);
				
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ТелоЗапросаСоответствие()
	Результат = Новый Соответствие();

	Если ЗначениеЗаполнено(Тело) И СокрЛП(Заголовки["Content-Type"]) = "application/x-www-form-urlencoded" Тогда
		Результат = Парсеры.ПараметрыИзТекста(Тело);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция РазделитьДвоичныеДанныеПоляДанныхФормы(ЧастьФормы)
	
	Структура = Новый Структура("Метаданные, Значение", Новый Соответствие);

	ЧастьРазделителя = ПолучитьДвоичныеДанныеИзСтроки("--");
	РазделительСтрок = ПолучитьДвоичныеДанныеИзСтроки(Символы.ВК + Символы.ПС);

	РазделеннаяЧастьФормы = Парсеры.РазделитьДвоичныеДанныеРазделителемВМассив(ЧастьФормы, РазделительСтрок);
	
	Если РазделеннаяЧастьФормы[РазделеннаяЧастьФормы.ВГраница()] = ЧастьРазделителя Тогда
		РазделеннаяЧастьФормы.Удалить(РазделеннаяЧастьФормы.ВГраница());
	КонецЕсли;

	Если РазделеннаяЧастьФормы.Количество() = 1 Тогда
		Структура.Метаданные = РазделеннаяЧастьФормы[0];
	ИначеЕсли РазделеннаяЧастьФормы.Количество() > 1 Тогда	
		МетаданныеДД = Новый Массив();
		ЗначениеДД = Новый Массив();

		ЭтоМетаданные = Истина;
		ПропущенПервыйРазделитель = Ложь;
		Для Каждого РазделеннаяЧасть Из РазделеннаяЧастьФормы Цикл		
			ЭтоЗамененныйРазделитель = РазделеннаяЧасть.Размер() = 0;
			МетаданныеЗаполнены = МетаданныеДД.Количество() > 0;
			
			Если ЭтоМетаданные И ЭтоЗамененныйРазделитель И МетаданныеЗаполнены Тогда
				ЭтоМетаданные = Ложь;
				ПропущенПервыйРазделитель = Ложь;
			КонецЕсли;

			Если ЭтоЗамененныйРазделитель И Не ПропущенПервыйРазделитель Тогда
				ПропущенПервыйРазделитель = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ЭтоМетаданные Тогда
				МассивДД = МетаданныеДД;
			Иначе
				МассивДД = ЗначениеДД;
			КонецЕсли;

			Если МассивДД.Количество() > 0 Тогда
				МассивДД.Добавить(РазделительСтрок);
			КонецЕсли;

			МассивДД.Добавить(РазделеннаяЧасть);
		КонецЦикла;

		Структура.Метаданные = СоединитьДвоичныеДанные(МетаданныеДД);
		Структура.Значение = СоединитьДвоичныеДанные(ЗначениеДД);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат Структура;
КонецФункции

Процедура ДополнитьСоответствие(Приемник, Источник)
	Для Каждого КиЗ Из Источник Цикл
		Приемник.Вставить(КиЗ.Ключ, КиЗ.Значение);
	КонецЦикла;
КонецПроцедуры

Функция ЭтоЗапросНаВебСокет() Экспорт
	КлючРукопожатия = Заголовки["Sec-WebSocket-Key"];
	Возврат НЕ КлючРукопожатия = Неопределено И НЕ ПустаяСтрока(КлючРукопожатия);
КонецФункции

Функция ЭтоЗапросНаСерверныеСобытия() Экспорт
	Возврат СокрЛП(Заголовки["Accept"]) = "text/event-stream" 
				И СокрЛП(Заголовки["Connection"]) = "keep-alive";
КонецФункции