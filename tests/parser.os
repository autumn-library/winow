#Использовать autumn
#Использовать ".."
#Использовать asserts

Функция ТестовыеДД()
	Возврат Новый ДвоичныеДанные("tests/features/multipart-form-data");
КонецФункции

&Тест
Процедура РазбиениеДДВМассивПростой() Экспорт
	
	// Дано
	Поделка = Новый Поделка();
	Поделка.ПросканироватьКаталог("tests/mock/");
	Поделка.ЗапуститьПриложение();
	Парсеры = Поделка.НайтиЖелудь("Парсеры");

	ДанныеФормыДД = ТестовыеДД();

	// Когда
	Результат = Парсеры.РазделитьДвоичныеДанныеРазделителемВМассив(ДанныеФормыДД, ПолучитьДвоичныеДанныеИзСтроки("---------------------------186955378527859643922779568670"));

	//Тогда 
	Ожидаем.Что(Результат).ИмеетТип("Массив");
	Ожидаем.Что(Результат.Количество()).Равно(8);
	Ожидаем.Что(Результат[1]).Равно(ПолучитьДвоичныеДанныеИзСтроки(Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""name""" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС + "nonamed" + Символы.ВК + Символы.ПС + "--"));
	Ожидаем.Что(Результат[2]).Равно(ПолучитьДвоичныеДанныеИзСтроки(Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""text""" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС + "text1" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС + "text2" + Символы.ВК + Символы.ПС + "--"));
	Ожидаем.Что(Результат[3]).Равно(ПолучитьДвоичныеДанныеИзСтроки(Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""age""" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС + "2023-09-13" + Символы.ВК + Символы.ПС + "--"));
	Ожидаем.Что(Результат[4]).Равно(ПолучитьДвоичныеДанныеИзСтроки(Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""lang""" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС + "ru" + Символы.ВК + Символы.ПС + "--"));
	Ожидаем.Что(Результат[5]).Равно(ПолучитьДвоичныеДанныеИзСтроки(Символы.ВК + Символы.ПС + "Content-Disposition: form-data; name=""lang""" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС + "en" + Символы.ВК + Символы.ПС + "--"));
	Ожидаем.Что((ПолучитьСтрокуИзДвоичныхДанных(Результат[0]))).Равно("--");
	Ожидаем.Что((ПолучитьСтрокуИзДвоичныхДанных(Результат[7]))).Равно("--" + Символы.ВК + Символы.ПС);

КонецПроцедуры

&Тест
Процедура ПолучениеДанныхФормы() Экспорт

	// Дано
	Поделка = Новый Поделка();
	Поделка.ПросканироватьКаталог("tests/mock/");
	Поделка.ЗапуститьПриложение();
	Парсеры = Поделка.НайтиЖелудь("Парсеры");
	ВходящийЗапрос = Поделка.НайтиЖелудь("ВходящийЗапрос");

	ВходящийЗапрос.ТелоДвоичныеДанные = ТестовыеДД();
	ВходящийЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=---------------------------186955378527859643922779568670");

	// Когда
	ДанныеФормы = ВходящийЗапрос.ЗначенияПараметровДляТочкиМаршрута(Неопределено)["ДанныеФормы"];

	РабочийОтбор = Новый Соответствие();
	РабочийОтбор.Вставить("name", "name");

	НеРабочийОтбор = Новый Соответствие();
	НеРабочийОтбор.Вставить("name", "unexist");

	// Тогда
	Ожидаем.Что(ДанныеФормы).ИмеетТип("ДанныеСоставнойФормы");
	Ожидаем.Что(ДанныеФормы.Количество()).Равно(6);

	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(0)).ИмеетТип("Структура");
	Ожидаем.Что(ПолучитьСтрокуИзДвоичныхДанных(ДанныеФормы.ПолучитьПоИндексу(0).Значение)).Равно("nonamed");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(0).Метаданные).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(0).Метаданные["Content-Disposition"]).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(0).Метаданные["Content-Disposition"].Количество()).Равно(2);
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(0).Метаданные["Content-Disposition"]["name"]).Равно("name");

	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(1)).ИмеетТип("Структура");
	Ожидаем.Что(ПолучитьСтрокуИзДвоичныхДанных(ДанныеФормы.ПолучитьПоИндексу(1).Значение)).Равно("text1" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС + "text2");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(1).Метаданные).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(1).Метаданные["Content-Disposition"]).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(1).Метаданные["Content-Disposition"].Количество()).Равно(2);
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(1).Метаданные["Content-Disposition"]["name"]).Равно("text");
			
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(2)).ИмеетТип("Структура");
	Ожидаем.Что(ПолучитьСтрокуИзДвоичныхДанных(ДанныеФормы.ПолучитьПоИндексу(2).Значение)).Равно("2023-09-13");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(2).Метаданные).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(2).Метаданные["Content-Disposition"]).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(2).Метаданные["Content-Disposition"].Количество()).Равно(2);
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(2).Метаданные["Content-Disposition"]["name"]).Равно("age");
	
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(3)).ИмеетТип("Структура");
	Ожидаем.Что(ПолучитьСтрокуИзДвоичныхДанных(ДанныеФормы.ПолучитьПоИндексу(3).Значение)).Равно("ru");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(3).Метаданные).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(3).Метаданные["Content-Disposition"]).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(3).Метаданные["Content-Disposition"].Количество()).Равно(2);
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(3).Метаданные["Content-Disposition"]["name"]).Равно("lang");
	
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(4)).ИмеетТип("Структура");
	Ожидаем.Что(ПолучитьСтрокуИзДвоичныхДанных(ДанныеФормы.ПолучитьПоИндексу(4).Значение)).Равно("en");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(4).Метаданные).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(4).Метаданные["Content-Disposition"]).ИмеетТип("Соответствие");
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(4).Метаданные["Content-Disposition"].Количество()).Равно(2);
	Ожидаем.Что(ДанныеФормы.ПолучитьПоИндексу(4).Метаданные["Content-Disposition"]["name"]).Равно("lang");

	Ожидаем.Что(ДанныеФормы.НайтиЗначениеСтрокойПоМетаданным(РабочийОтбор)).Равно("nonamed");
	Ожидаем.Что(ДанныеФормы.НайтиЗначениеПоМетаданным(РабочийОтбор)).Равно(ПолучитьДвоичныеДанныеИзСтроки("nonamed"));
	Ожидаем.Что(ДанныеФормы.НайтиДанныеПоМетаданным(НеРабочийОтбор)).Равно(Неопределено);

	Ожидаем.Что(ДанныеФормы.НайтиЗначениеПоМетаданным(Новый Структура("name", "file"))).Равно(Новый ДвоичныеДанные("tests/features/img.jpg"));

КонецПроцедуры

&Тест
Процедура ПолучениеСтруктурыУзла() Экспорт

	// Дано
	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();
	Парсеры = Поделка.НайтиЖелудь("Парсеры");

	ВалидныеТестовыеЗначения = СтрРазделить("
	|||0
	|127.0.0.1|127.0.0.1|0
	|127.0.0.1:80|127.0.0.1|80
	|3ffe:38e1::0100:1:0001|3ffe:38e1::0100:1:0001|0
	|[2001:0db8::0001]|2001:0db8::0001|0
	|[11:22:33:44:55:66:77:8]:3333|11:22:33:44:55:66:77:8|3333
	|", Символы.ПС, Ложь);

	// Когда
	Для Каждого Строка Из ВалидныеТестовыеЗначения Цикл

		Подстроки = СтрРазделить(Строка, "|");

		ТестовоеЗначение = Подстроки[0];
		Адрес = Подстроки[1];
		Порт = Число(Подстроки[2]);

		СтруктураУзла = Парсеры.СтруктураУзла(ТестовоеЗначение);

		Ожидаем.Что(СтруктураУзла.Адрес).Равно(Адрес);
		Ожидаем.Что(СтруктураУзла.Порт).Равно(Порт);

	КонецЦикла;
	
КонецПроцедуры